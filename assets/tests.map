{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","costthat/tests/integration/components/list-filter-test.js","costthat/tests/integration/components/location-map-test.js","costthat/tests/integration/components/plan-listing-test.js","costthat/tests/integration/components/product-list-filter-test.js","costthat/tests/integration/components/product-listing-test.js","costthat/tests/integration/helpers/plan-property-type-test.js","costthat/tests/lint/app.lint-test.js","costthat/tests/lint/templates.template.lint-test.js","costthat/tests/lint/tests.lint-test.js","costthat/tests/test-helper.js","costthat/tests/unit/adapters/application-test.js","costthat/tests/unit/controllers/plans-test.js","costthat/tests/unit/controllers/plans/index-test.js","costthat/tests/unit/controllers/products-test.js","costthat/tests/unit/controllers/products/index-test.js","costthat/tests/unit/models/plan-test.js","costthat/tests/unit/models/product-test.js","costthat/tests/unit/routes/about-test.js","costthat/tests/unit/routes/contact-test.js","costthat/tests/unit/routes/index-test.js","costthat/tests/unit/routes/plans-test.js","costthat/tests/unit/routes/plans/index-test.js","costthat/tests/unit/routes/plans/show-test.js","costthat/tests/unit/routes/products-test.js","costthat/tests/unit/routes/products/index-test.js","costthat/tests/unit/routes/products/show-test.js","costthat/tests/unit/services/map-element-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"costthat/tests/integration/components/list-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | list-filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Omjwu85K\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"list-filter\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ruKTuHVN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"list-filter\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"costthat/tests/integration/components/location-map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | location-map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"z6fCboKx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"location-map\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"12jelpjz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"location-map\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"costthat/tests/integration/components/plan-listing-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | plan-listing', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"SVSlCUuV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plan-listing\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/2rT+8Qo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"plan-listing\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"costthat/tests/integration/components/product-list-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | product-list-filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"pFCtjRPV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-list-filter\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JKhZIG5s\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"product-list-filter\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"costthat/tests/integration/components/product-listing-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | product-listing', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"pSwDbhjW\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-listing\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"stakW3UD\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"product-listing\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"costthat/tests/integration/helpers/plan-property-type-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | rental-property-type', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iIlSP0oL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"rental-property-type\\\",[[24,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define(\"costthat/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/list-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/list-filter.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/location-map.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-map.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/plan-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/plan-listing.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/product-list-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/product-list-filter.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/product-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/product-listing.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/plans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/plans.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/plans/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/plans/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/products.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/products/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/products/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/plan-property-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/plan-property-type.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/plan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/plan.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/product.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/plans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/plans.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/plans/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/plans/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/plans/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/plans/show.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/products/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/products/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products/show.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/map-element.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/map-element.js should pass ESLint\\n\\n');\n  });\n});","define(\"costthat/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('costthat/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/components/list-filter.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/components/list-filter.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/components/location-map.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/components/location-map.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/components/plan-listing.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/components/plan-listing.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/components/product-list-filter.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/components/product-list-filter.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/components/product-listing.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/components/product-listing.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/contact.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/plans.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/plans.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/plans/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/plans/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/plans/show.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/plans/show.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/products.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/products.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/products/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/products/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('costthat/templates/products/show.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'costthat/templates/products/show.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"costthat/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/list-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/location-map-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-map-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/plan-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/plan-listing-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/product-list-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/product-list-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/product-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/product-listing-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/plan-property-type-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/plan-property-type-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/plans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/plans-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/plans/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/plans/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/products-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/products-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/products/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/products/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/plan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/plan-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/product-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/plans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/plans-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/plans/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/plans/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/plans/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/plans/show-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/products-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/products/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/products/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products/show-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/map-element-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/map-element-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"costthat/tests/test-helper\", [\"costthat/app\", \"costthat/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"costthat/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"costthat/tests/unit/controllers/plans-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | plans', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:plans');\n      assert.ok(controller);\n    });\n  });\n});","define(\"costthat/tests/unit/controllers/plans/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | plans/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:plans/index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"costthat/tests/unit/controllers/products-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | products', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:products');\n      assert.ok(controller);\n    });\n  });\n});","define(\"costthat/tests/unit/controllers/products/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | products/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:products/index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"costthat/tests/unit/models/plan-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | plan', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('plan')); // let store = this.get('store')();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"costthat/tests/unit/models/product-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | product', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('product', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/about-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/plans-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | plans', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:plans');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/plans/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | plans/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:plans/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/plans/show-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | plans/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:plans/show');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/products-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | products', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:products');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/products/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | products/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:products/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/routes/products/show-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | products/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:products/show');\n      assert.ok(route);\n    });\n  });\n});","define(\"costthat/tests/unit/services/map-element-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | map-element', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:map-element');\n      assert.ok(service);\n    });\n  });\n});","define('costthat/config/environment', [], function() {\n  var prefix = 'costthat';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('costthat/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfnGA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}